#!/bin/bash
#
# Node Peer Reporter (/usr/sbin/npr)
# (c)2023 Simon Kapadia
#
# See LICENSE file for details of MIT license

# Load in the config file
eval $(sed -r '/[^=]+=[^=]+/!d;s/\s+=\s/=/g' "/etc/npr.conf")
PORTS=`cat /proc/net/ax25 | awk {'print $2'} | sort -n | uniq`
SWVER=`uname -r`

command -v curl >/dev/null 2>&1 || { echo >&2 "curl not found, aborting"; exit 1; }
command -v jq >/dev/null 2>&1 || { echo >&2 "jq not found, aborting"; exit 1; }

# Function to generate the payload
# (Should probably write this using a proper json parser but this was quick)
payload() {
echo "{"
cat << EOF1
  "nodeAlias": "$NODENAME",
  "location": {
    "locator": "$LOCATOR",
    "randomised": true,
    "asl": $ASL
  },
  "software": {
    "name": "Linux",
    "version": "$SWVER"
  },
  "ports": [
EOF1
for PORT in `cat /proc/net/ax25 | awk {'print $2'} | sort -n | uniq` ;
  do
    INTNAME=`/sbin/ifconfig $PORT | grep ax25 | awk {'print $2'}`
    PORTNAME=`grep "\s${INTNAME}\s" /etc/ax25/axports | awk {'print $1'}`
    FREQ="FREQ_$PORTNAME"
    MODE="MODE_$PORTNAME"
    BAUD="BAUD_$PORTNAME"
    TYPE="TYPE_$PORTNAME"
    MOD="MOD_$PORTNAME"
cat << EOF2
    {
      "id": "$PORTNAME",
      "freq": ${!FREQ},
      "mode": "${!MODE}",
      "baud": ${!BAUD},
      "linkType": "${!TYPE}",
      "modulation": "${!MOD}"
    }, 
EOF2
  done
cat << EOF3
  null
  ],
  "neighbours": [
EOF3
for PORT in `cat /proc/net/ax25 | awk {'print $2'} | sort -n | uniq` ;
  do
    INTNAME=`/sbin/ifconfig $PORT | grep ax25 | awk {'print $2'}`
    PORTNAME=`grep "\s${INTNAME}\s" /etc/ax25/axports | awk {'print $1'}`
    PORTNODES=`grep $PORT /proc/net/nr_neigh | awk {'print $2'}`
    for PORTNODE in $PORTNODES ;
      do
cat << EOF4
    {
      "node": "$PORTNODE",
      "port": "$PORTNAME"
    },
EOF4
      done
  done
cat << EOF5
  null
  ],
  "mheard": [
EOF5
TZ=UTC mheard -n | egrep `date +'%Y-%m-%d'`\|`date --date "Yesterday" +'%Y-%m-%d'` |
  while read LINE ;
    do echo $LINE |
      awk '{print "{\42ssid\42:\42"$1"\42,\42port\42:\42"$2"\42,\42packets\42: "$3",\42lastHeard\42:\42"$4" "$5"\42},"}' ;
    done
cat << EOF6
  null
  ],
  "source": "ReportedByNode"
}
EOF6
}

# Check for debug parameter
CURLOPTS=""
DEBUG="false"
if [ $1 ]  && [ $1 == '-d' ] ; then
  echo Debug Mode Enabled
  CURLOPTS+="-v -v"
  DEBUG="true"
fi

# Check state file
diff -q /tmp/npr.state /proc/net/nr_neigh > /dev/null
DIFF=$?
if [ $DIFF -ne 0 ] || [ $(find /tmp/npr.state -mmin +59) ] ; then
  # State file is different or does not exist or an hour has passed
  PAYLOAD=$(payload | jq -c -M)
  echo $(date) - Peer node changes detected, uploading payload to nodes.ukpacketradio.network:
  echo $PAYLOAD
  # Build and run the curl command
  [ $DEBUG == "true" ] && echo curl "https://nodes.ukpacketradio.network/api/NodeData/$NODENAME" -f -H 'accept: */*' -H 'Content-Type: application/json' $CURLOPTS -d "$PAYLOAD"
  curl "https://nodes.ukpacketradio.network/api/NodeData/$NODENAME" -f -H 'accept: */*' -H 'Content-Type: application/json' $CURLOPTS -d "$PAYLOAD"
  RESPONSE=$?
  if [ $RESPONSE -ne 0 ]; then
    echo Error in upload to nodes.ukpacketradio.network, please run $0 with -d for details
  else
    # Save new state file
    cp /proc/net/nr_neigh /tmp/npr.state
  fi
else
  [ $DEBUG == "true" ] && echo No change in node state
fi
